name: Neon Database Backup to Google Drive

on:
  # Schedule to run daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      retention_days:
        description: 'Number of days to check for data modifications'
        required: false
        default: '7'
        type: string
      cleanup_old_backups:
        description: 'Cleanup old backup files'
        required: false
        default: 'true'
        type: boolean
      cleanup_retention_days:
        description: 'Number of days to retain backups'
        required: false
        default: '30'
        type: string

env:
  NODE_VERSION: '20'

jobs:
  backup:
    name: Backup Neon Databases
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup PostgreSQL client (Windows)
        run: |
          # Check if pg_dump is available in PATH or common locations
          if (Get-Command pg_dump -ErrorAction SilentlyContinue) {
            Write-Host "pg_dump found in PATH"
            pg_dump --version
          } elseif (Test-Path "C:\Program Files\PostgreSQL\*\bin\pg_dump.exe") {
            $pgPath = (Get-ChildItem "C:\Program Files\PostgreSQL\*\bin\pg_dump.exe" | Select-Object -First 1).DirectoryName
            Write-Host "Adding PostgreSQL to PATH: $pgPath"
            echo "$pgPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            & "$pgPath\pg_dump.exe" --version
          } else {
            Write-Host "PostgreSQL not found. Installing PostgreSQL..."
            
            # Download PostgreSQL installer
            $postgresUrl = "https://get.enterprisedb.com/postgresql/postgresql-16.4-1-windows-x64.exe"
            $installerPath = "$env:TEMP\postgresql-installer.exe"
            
            Write-Host "Downloading PostgreSQL installer..."
            Invoke-WebRequest -Uri $postgresUrl -OutFile $installerPath
            
            Write-Host "Installing PostgreSQL silently..."
            # Silent install with minimal components (just client tools)
            Start-Process -FilePath $installerPath -ArgumentList "--mode unattended --unattendedmodeui none --disable-components server --superpassword postgres" -Wait
            
            # Add PostgreSQL to PATH
            $pgPath = "C:\Program Files\PostgreSQL\16\bin"
            if (Test-Path $pgPath) {
              Write-Host "Adding PostgreSQL to PATH: $pgPath"
              echo "$pgPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              & "$pgPath\pg_dump.exe" --version
            } else {
              Write-Error "PostgreSQL installation failed"
              exit 1
            }
            
            # Cleanup installer
            Remove-Item $installerPath -Force
          }
        shell: powershell

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Verify pg_dump installation
        run: |
          pg_dump --version
          where pg_dump
        shell: powershell

      - name: Run backup process
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          GOOGLE_DRIVE_CREDENTIALS: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          BACKUP_RETENTION_DAYS: ${{ github.event.inputs.retention_days || '7' }}
          CLEANUP_OLD_BACKUPS: ${{ github.event.inputs.cleanup_old_backups || 'true' }}
          CLEANUP_RETENTION_DAYS: ${{ github.event.inputs.cleanup_retention_days || '30' }}
          OUTPUT_DIR: './backups'
        run: node dist/index.js

      - name: Upload backup artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: backup-logs-${{ github.run_id }}
          path: |
            ./backups/*.log
            ./backups/*.sql
            ./backups/*.dump
          retention-days: 7

      - name: Cleanup local backups
        if: always()
        run: |
          if (Test-Path "./backups/*.sql") { Remove-Item "./backups/*.sql" -Force }
          if (Test-Path "./backups/*.dump") { Remove-Item "./backups/*.dump" -Force }
          Write-Host "Local backup files cleaned up"
        shell: powershell

  notify:
    name: Send notification
    needs: backup
    runs-on: self-hosted
    if: always()
    
    steps:
      - name: Send success notification
        if: needs.backup.result == 'success'
        run: |
          Write-Host "✅ Neon database backup completed successfully"
          Write-Host "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
        shell: powershell

      - name: Send failure notification
        if: needs.backup.result == 'failure'
        run: |
          Write-Host "❌ Neon database backup failed"
          Write-Host "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
          Write-Host "Check the workflow logs for details"
        shell: powershell

      # Optional: Add Slack/Discord/Email notifications here
      # - name: Slack notification
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ needs.backup.result }}
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     text: |
      #       Neon Database Backup Status: ${{ needs.backup.result }}
      #       Repository: ${{ github.repository }}
      #       Workflow: ${{ github.workflow }}
      #       Run ID: ${{ github.run_id }}
